{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\matet\\\\Documents\\\\Projects\\\\React\\\\Udemy\\\\nextjs-course2\\\\pages\\\\[meetupId]\\\\index.js\";\nimport Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticPaths() {\n  let meetups;\n\n  try {\n    const client = await MongoClient.connect(\"mongodb+srv://matetami:Tamiwarrior0913@cluster0.ythrc.mongodb.net/meetups?retryWrites=true&w=majority\");\n    const db = client.db();\n    const meetupsCollection = db.collection(\"meetups\");\n    meetups = await meetupsCollection.find({}, {\n      _id: 1\n    }).toArray();\n    client.close();\n  } catch (error) {\n    console.log(\"Error getting meetups data:\", error);\n  }\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  let selectedMeetup;\n\n  try {\n    const client = await MongoClient.connect(\"mongodb+srv://matetami:Tamiwarrior0913@cluster0.ythrc.mongodb.net/meetups?retryWrites=true&w=majority\");\n    const db = client.db();\n    const meetupsCollection = db.collection(\"meetups\");\n    selectedMeetup = await meetupsCollection.findOne({\n      _id: ObjectId(meetupId)\n    });\n    client.close();\n  } catch (error) {\n    console.log(\"Error getting meetups data:\", error);\n  }\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/matet/Documents/Projects/React/Udemy/nextjs-course2/pages/[meetupId]/index.js"],"names":["Head","MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","meetups","client","connect","db","meetupsCollection","collection","find","_id","toArray","close","error","console","log","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import Head from \"next/head\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetails(props) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Head>\r\n\t\t\t\t<title>{props.meetupData.title}</title>\r\n\t\t\t\t<meta name=\"description\" content={props.meetupData.description} />\r\n\t\t\t</Head>\r\n\t\t\t<MeetupDetail\r\n\t\t\t\timage={props.meetupData.image}\r\n\t\t\t\ttitle={props.meetupData.title}\r\n\t\t\t\taddress={props.meetupData.address}\r\n\t\t\t\tdescription={props.meetupData.description}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\tlet meetups;\r\n\r\n\ttry {\r\n\t\tconst client = await MongoClient.connect(\r\n\t\t\t\"mongodb+srv://matetami:Tamiwarrior0913@cluster0.ythrc.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n\t\t);\r\n\t\tconst db = client.db();\r\n\r\n\t\tconst meetupsCollection = db.collection(\"meetups\");\r\n\r\n\t\tmeetups = await meetupsCollection\r\n\t\t\t.find(\r\n\t\t\t\t{},\r\n\t\t\t\t{\r\n\t\t\t\t\t_id: 1,\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t.toArray();\r\n\r\n\t\tclient.close();\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error getting meetups data:\", error);\r\n\t}\r\n\r\n\treturn {\r\n\t\tfallback: false,\r\n\t\tpaths: meetups.map((meetup) => ({\r\n\t\t\tparams: { meetupId: meetup._id.toString() },\r\n\t\t})),\r\n\t};\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n\t// fetch data for a single meetup\r\n\tconst meetupId = context.params.meetupId;\r\n\r\n\tlet selectedMeetup;\r\n\r\n\ttry {\r\n\t\tconst client = await MongoClient.connect(\r\n\t\t\t\"mongodb+srv://matetami:Tamiwarrior0913@cluster0.ythrc.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n\t\t);\r\n\t\tconst db = client.db();\r\n\r\n\t\tconst meetupsCollection = db.collection(\"meetups\");\r\n\r\n\t\tselectedMeetup = await meetupsCollection.findOne({\r\n\t\t\t_id: ObjectId(meetupId),\r\n\t\t});\r\n\r\n\t\tclient.close();\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error getting meetups data:\", error);\r\n\t}\r\n\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tmeetupData: {\r\n\t\t\t\tid: selectedMeetup._id.toString(),\r\n\t\t\t\ttitle: selectedMeetup.title,\r\n\t\t\t\taddress: selectedMeetup.address,\r\n\t\t\t\timage: selectedMeetup.image,\r\n\t\t\t\tdescription: selectedMeetup.description,\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}